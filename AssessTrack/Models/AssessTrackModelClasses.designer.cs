#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssessTrack.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="AssessTrackData")]
	public partial class AssessTrackModelClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswerKey(AnswerKey instance);
    partial void UpdateAnswerKey(AnswerKey instance);
    partial void DeleteAnswerKey(AnswerKey instance);
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertAssessment(Assessment instance);
    partial void UpdateAssessment(Assessment instance);
    partial void DeleteAssessment(Assessment instance);
    partial void InsertAssessmentType(AssessmentType instance);
    partial void UpdateAssessmentType(AssessmentType instance);
    partial void DeleteAssessmentType(AssessmentType instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertResponse(Response instance);
    partial void UpdateResponse(Response instance);
    partial void DeleteResponse(Response instance);
    partial void InsertSite(Site instance);
    partial void UpdateSite(Site instance);
    partial void DeleteSite(Site instance);
    partial void InsertSubmissionRecord(SubmissionRecord instance);
    partial void UpdateSubmissionRecord(SubmissionRecord instance);
    partial void DeleteSubmissionRecord(SubmissionRecord instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    partial void InsertCourseTerm(CourseTerm instance);
    partial void UpdateCourseTerm(CourseTerm instance);
    partial void DeleteCourseTerm(CourseTerm instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertCourseTermMember(CourseTermMember instance);
    partial void UpdateCourseTermMember(CourseTermMember instance);
    partial void DeleteCourseTermMember(CourseTermMember instance);
    partial void InsertSiteMember(SiteMember instance);
    partial void UpdateSiteMember(SiteMember instance);
    partial void DeleteSiteMember(SiteMember instance);
    #endregion
		
		public AssessTrackModelClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AssessTrackDataConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AssessTrackModelClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssessTrackModelClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssessTrackModelClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssessTrackModelClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AnswerKey> AnswerKeys
		{
			get
			{
				return this.GetTable<AnswerKey>();
			}
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<AnswerTag> AnswerTags
		{
			get
			{
				return this.GetTable<AnswerTag>();
			}
		}
		
		public System.Data.Linq.Table<Assessment> Assessments
		{
			get
			{
				return this.GetTable<Assessment>();
			}
		}
		
		public System.Data.Linq.Table<AssessmentTag> AssessmentTags
		{
			get
			{
				return this.GetTable<AssessmentTag>();
			}
		}
		
		public System.Data.Linq.Table<AssessmentType> AssessmentTypes
		{
			get
			{
				return this.GetTable<AssessmentType>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<QuestionTag> QuestionTags
		{
			get
			{
				return this.GetTable<QuestionTag>();
			}
		}
		
		public System.Data.Linq.Table<Response> Responses
		{
			get
			{
				return this.GetTable<Response>();
			}
		}
		
		public System.Data.Linq.Table<Site> Sites
		{
			get
			{
				return this.GetTable<Site>();
			}
		}
		
		public System.Data.Linq.Table<SubmissionRecord> SubmissionRecords
		{
			get
			{
				return this.GetTable<SubmissionRecord>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Term> Terms
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
		
		public System.Data.Linq.Table<CourseTerm> CourseTerms
		{
			get
			{
				return this.GetTable<CourseTerm>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<CourseTermMember> CourseTermMembers
		{
			get
			{
				return this.GetTable<CourseTermMember>();
			}
		}
		
		public System.Data.Linq.Table<SiteMember> SiteMembers
		{
			get
			{
				return this.GetTable<SiteMember>();
			}
		}
		
		[Function(Name="dbo.sp_AddAssessmentTag")]
		public int sp_AddAssessmentTag([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tagid, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> assessmentid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tagid, assessmentid);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_DeleteTagFromAssessment")]
		public int sp_DeleteTagFromAssessment([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tagid, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> assessmentid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tagid, assessmentid);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_DeleteTagFromQuestion")]
		public int sp_DeleteTagFromQuestion([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tagid, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> questionid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tagid, questionid);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_AddQuestionTag")]
		public int sp_AddQuestionTag([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tagid, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> questionid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tagid, questionid);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_AddAnswerTag")]
		public int sp_AddAnswerTag([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tagid, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> answerid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tagid, answerid);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_DeleteTagFromAnswer")]
		public int sp_DeleteTagFromAnswer([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tagid, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> answerid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tagid, answerid);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.AnswerKeys")]
	public partial class AnswerKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AnswerKeyID;
		
		private System.Guid _AnswerID;
		
		private double _Weight;
		
		private string _Value;
		
		private EntityRef<Answer> _Answer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerKeyIDChanging(System.Guid value);
    partial void OnAnswerKeyIDChanged();
    partial void OnAnswerIDChanging(System.Guid value);
    partial void OnAnswerIDChanged();
    partial void OnWeightChanging(double value);
    partial void OnWeightChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public AnswerKey()
		{
			this._Answer = default(EntityRef<Answer>);
			OnCreated();
		}
		
		[Column(Storage="_AnswerKeyID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid AnswerKeyID
		{
			get
			{
				return this._AnswerKeyID;
			}
			set
			{
				if ((this._AnswerKeyID != value))
				{
					this.OnAnswerKeyIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerKeyID = value;
					this.SendPropertyChanged("AnswerKeyID");
					this.OnAnswerKeyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					if (this._Answer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float NOT NULL")]
		public double Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="Answer_AnswerKey", Storage="_Answer", ThisKey="AnswerID", IsForeignKey=true)]
		public Answer Answer
		{
			get
			{
				return this._Answer.Entity;
			}
			set
			{
				Answer previousValue = this._Answer.Entity;
				if (((previousValue != value) 
							|| (this._Answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answer.Entity = null;
						previousValue.AnswerKeys.Remove(this);
					}
					this._Answer.Entity = value;
					if ((value != null))
					{
						value.AnswerKeys.Add(this);
						this._AnswerID = value.AnswerID;
					}
					else
					{
						this._AnswerID = default(System.Guid);
					}
					this.SendPropertyChanged("Answer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Answers")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AnswerID;
		
		private double _Weight;
		
		private System.Guid _QuestionID;
		
		private System.Guid _AssessmentID;
		
		private string _AnswerKeyText;
		
		private string _Type;
		
		private EntitySet<AnswerKey> _AnswerKeys;
		
		private EntitySet<Response> _Responses;
		
		private EntityRef<Assessment> _Assessment;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerIDChanging(System.Guid value);
    partial void OnAnswerIDChanged();
    partial void OnWeightChanging(double value);
    partial void OnWeightChanged();
    partial void OnQuestionIDChanging(System.Guid value);
    partial void OnQuestionIDChanged();
    partial void OnAssessmentIDChanging(System.Guid value);
    partial void OnAssessmentIDChanged();
    partial void OnAnswerKeyTextChanging(string value);
    partial void OnAnswerKeyTextChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Answer()
		{
			this._AnswerKeys = new EntitySet<AnswerKey>(new Action<AnswerKey>(this.attach_AnswerKeys), new Action<AnswerKey>(this.detach_AnswerKeys));
			this._Responses = new EntitySet<Response>(new Action<Response>(this.attach_Responses), new Action<Response>(this.detach_Responses));
			this._Assessment = default(EntityRef<Assessment>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_AnswerID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float NOT NULL")]
		public double Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssessmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssessmentID
		{
			get
			{
				return this._AssessmentID;
			}
			set
			{
				if ((this._AssessmentID != value))
				{
					if (this._Assessment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentID = value;
					this.SendPropertyChanged("AssessmentID");
					this.OnAssessmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerKeyText", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string AnswerKeyText
		{
			get
			{
				return this._AnswerKeyText;
			}
			set
			{
				if ((this._AnswerKeyText != value))
				{
					this.OnAnswerKeyTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerKeyText = value;
					this.SendPropertyChanged("AnswerKeyText");
					this.OnAnswerKeyTextChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="Answer_AnswerKey", Storage="_AnswerKeys", OtherKey="AnswerID")]
		public EntitySet<AnswerKey> AnswerKeys
		{
			get
			{
				return this._AnswerKeys;
			}
			set
			{
				this._AnswerKeys.Assign(value);
			}
		}
		
		[Association(Name="Answer_Response", Storage="_Responses", OtherKey="AnswerID")]
		public EntitySet<Response> Responses
		{
			get
			{
				return this._Responses;
			}
			set
			{
				this._Responses.Assign(value);
			}
		}
		
		[Association(Name="Assessment_Answer", Storage="_Assessment", ThisKey="AssessmentID", IsForeignKey=true)]
		public Assessment Assessment
		{
			get
			{
				return this._Assessment.Entity;
			}
			set
			{
				Assessment previousValue = this._Assessment.Entity;
				if (((previousValue != value) 
							|| (this._Assessment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assessment.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Assessment.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._AssessmentID = value.AssessmentID;
					}
					else
					{
						this._AssessmentID = default(System.Guid);
					}
					this.SendPropertyChanged("Assessment");
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Question", ThisKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(System.Guid);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnswerKeys(AnswerKey entity)
		{
			this.SendPropertyChanging();
			entity.Answer = this;
		}
		
		private void detach_AnswerKeys(AnswerKey entity)
		{
			this.SendPropertyChanging();
			entity.Answer = null;
		}
		
		private void attach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.Answer = this;
		}
		
		private void detach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.Answer = null;
		}
	}
	
	[Table(Name="dbo.AnswerTags")]
	public partial class AnswerTag
	{
		
		private System.Guid _TagID;
		
		private System.Guid _AnswerID;
		
		public AnswerTag()
		{
		}
		
		[Column(Storage="_TagID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this._TagID = value;
				}
			}
		}
		
		[Column(Storage="_AnswerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					this._AnswerID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Assessments")]
	public partial class Assessment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssessmentID;
		
		private string _Name;
		
		private System.DateTime _DueDate;
		
		private bool _IsExtraCredit;
		
		private System.Guid _AssessmentTypeID;
		
		private string _Data;
		
		private System.DateTime _CreatedDate;
		
		private bool _IsVisible;
		
		private bool _IsOpen;
		
		private bool _IsGradable;
		
		private bool _AllowMultipleSubmissions;
		
		private System.Guid _CourseTermID;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<SubmissionRecord> _SubmissionRecords;
		
		private EntityRef<AssessmentType> _AssessmentType;
		
		private EntityRef<CourseTerm> _CourseTerm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssessmentIDChanging(System.Guid value);
    partial void OnAssessmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnIsExtraCreditChanging(bool value);
    partial void OnIsExtraCreditChanged();
    partial void OnAssessmentTypeIDChanging(System.Guid value);
    partial void OnAssessmentTypeIDChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    partial void OnIsOpenChanging(bool value);
    partial void OnIsOpenChanged();
    partial void OnIsGradableChanging(bool value);
    partial void OnIsGradableChanged();
    partial void OnAllowMultipleSubmissionsChanging(bool value);
    partial void OnAllowMultipleSubmissionsChanged();
    partial void OnCourseTermIDChanging(System.Guid value);
    partial void OnCourseTermIDChanged();
    #endregion
		
		public Assessment()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._SubmissionRecords = new EntitySet<SubmissionRecord>(new Action<SubmissionRecord>(this.attach_SubmissionRecords), new Action<SubmissionRecord>(this.detach_SubmissionRecords));
			this._AssessmentType = default(EntityRef<AssessmentType>);
			this._CourseTerm = default(EntityRef<CourseTerm>);
			OnCreated();
		}
		
		[Column(Storage="_AssessmentID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid AssessmentID
		{
			get
			{
				return this._AssessmentID;
			}
			set
			{
				if ((this._AssessmentID != value))
				{
					this.OnAssessmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentID = value;
					this.SendPropertyChanged("AssessmentID");
					this.OnAssessmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsExtraCredit", DbType="Bit NOT NULL")]
		public bool IsExtraCredit
		{
			get
			{
				return this._IsExtraCredit;
			}
			set
			{
				if ((this._IsExtraCredit != value))
				{
					this.OnIsExtraCreditChanging(value);
					this.SendPropertyChanging();
					this._IsExtraCredit = value;
					this.SendPropertyChanged("IsExtraCredit");
					this.OnIsExtraCreditChanged();
				}
			}
		}
		
		[Column(Storage="_AssessmentTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssessmentTypeID
		{
			get
			{
				return this._AssessmentTypeID;
			}
			set
			{
				if ((this._AssessmentTypeID != value))
				{
					if (this._AssessmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTypeID = value;
					this.SendPropertyChanged("AssessmentTypeID");
					this.OnAssessmentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_IsOpen", DbType="Bit NOT NULL")]
		public bool IsOpen
		{
			get
			{
				return this._IsOpen;
			}
			set
			{
				if ((this._IsOpen != value))
				{
					this.OnIsOpenChanging(value);
					this.SendPropertyChanging();
					this._IsOpen = value;
					this.SendPropertyChanged("IsOpen");
					this.OnIsOpenChanged();
				}
			}
		}
		
		[Column(Storage="_IsGradable", DbType="Bit NOT NULL")]
		public bool IsGradable
		{
			get
			{
				return this._IsGradable;
			}
			set
			{
				if ((this._IsGradable != value))
				{
					this.OnIsGradableChanging(value);
					this.SendPropertyChanging();
					this._IsGradable = value;
					this.SendPropertyChanged("IsGradable");
					this.OnIsGradableChanged();
				}
			}
		}
		
		[Column(Storage="_AllowMultipleSubmissions", DbType="Bit NOT NULL")]
		public bool AllowMultipleSubmissions
		{
			get
			{
				return this._AllowMultipleSubmissions;
			}
			set
			{
				if ((this._AllowMultipleSubmissions != value))
				{
					this.OnAllowMultipleSubmissionsChanging(value);
					this.SendPropertyChanging();
					this._AllowMultipleSubmissions = value;
					this.SendPropertyChanged("AllowMultipleSubmissions");
					this.OnAllowMultipleSubmissionsChanged();
				}
			}
		}
		
		[Column(Storage="_CourseTermID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CourseTermID
		{
			get
			{
				return this._CourseTermID;
			}
			set
			{
				if ((this._CourseTermID != value))
				{
					if (this._CourseTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTermIDChanging(value);
					this.SendPropertyChanging();
					this._CourseTermID = value;
					this.SendPropertyChanged("CourseTermID");
					this.OnCourseTermIDChanged();
				}
			}
		}
		
		[Association(Name="Assessment_Answer", Storage="_Answers", OtherKey="AssessmentID")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[Association(Name="Assessment_Question", Storage="_Questions", OtherKey="AssessmentID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[Association(Name="Assessment_SubmissionRecord", Storage="_SubmissionRecords", OtherKey="AssessmentID")]
		public EntitySet<SubmissionRecord> SubmissionRecords
		{
			get
			{
				return this._SubmissionRecords;
			}
			set
			{
				this._SubmissionRecords.Assign(value);
			}
		}
		
		[Association(Name="AssessmentType_Assessment", Storage="_AssessmentType", ThisKey="AssessmentTypeID", IsForeignKey=true)]
		public AssessmentType AssessmentType
		{
			get
			{
				return this._AssessmentType.Entity;
			}
			set
			{
				AssessmentType previousValue = this._AssessmentType.Entity;
				if (((previousValue != value) 
							|| (this._AssessmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssessmentType.Entity = null;
						previousValue.Assessments.Remove(this);
					}
					this._AssessmentType.Entity = value;
					if ((value != null))
					{
						value.Assessments.Add(this);
						this._AssessmentTypeID = value.AssessmentTypeID;
					}
					else
					{
						this._AssessmentTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("AssessmentType");
				}
			}
		}
		
		[Association(Name="CourseTerm_Assessment", Storage="_CourseTerm", ThisKey="CourseTermID", IsForeignKey=true)]
		public CourseTerm CourseTerm
		{
			get
			{
				return this._CourseTerm.Entity;
			}
			set
			{
				CourseTerm previousValue = this._CourseTerm.Entity;
				if (((previousValue != value) 
							|| (this._CourseTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTerm.Entity = null;
						previousValue.Assessments.Remove(this);
					}
					this._CourseTerm.Entity = value;
					if ((value != null))
					{
						value.Assessments.Add(this);
						this._CourseTermID = value.CourseTermID;
					}
					else
					{
						this._CourseTermID = default(System.Guid);
					}
					this.SendPropertyChanged("CourseTerm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = null;
		}
		
		private void attach_SubmissionRecords(SubmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = this;
		}
		
		private void detach_SubmissionRecords(SubmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = null;
		}
	}
	
	[Table(Name="dbo.AssessmentTags")]
	public partial class AssessmentTag
	{
		
		private System.Guid _TagID;
		
		private System.Guid _AssessmentID;
		
		public AssessmentTag()
		{
		}
		
		[Column(Storage="_TagID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this._TagID = value;
				}
			}
		}
		
		[Column(Storage="_AssessmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssessmentID
		{
			get
			{
				return this._AssessmentID;
			}
			set
			{
				if ((this._AssessmentID != value))
				{
					this._AssessmentID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.AssessmentTypes")]
	public partial class AssessmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssessmentTypeID;
		
		private string _Name;
		
		private double _Weight;
		
		private bool _IsExtraCredit;
		
		private System.Guid _CourseTermID;
		
		private EntitySet<Assessment> _Assessments;
		
		private EntityRef<CourseTerm> _CourseTerm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssessmentTypeIDChanging(System.Guid value);
    partial void OnAssessmentTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWeightChanging(double value);
    partial void OnWeightChanged();
    partial void OnIsExtraCreditChanging(bool value);
    partial void OnIsExtraCreditChanged();
    partial void OnCourseTermIDChanging(System.Guid value);
    partial void OnCourseTermIDChanged();
    #endregion
		
		public AssessmentType()
		{
			this._Assessments = new EntitySet<Assessment>(new Action<Assessment>(this.attach_Assessments), new Action<Assessment>(this.detach_Assessments));
			this._CourseTerm = default(EntityRef<CourseTerm>);
			OnCreated();
		}
		
		[Column(Storage="_AssessmentTypeID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid AssessmentTypeID
		{
			get
			{
				return this._AssessmentTypeID;
			}
			set
			{
				if ((this._AssessmentTypeID != value))
				{
					this.OnAssessmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTypeID = value;
					this.SendPropertyChanged("AssessmentTypeID");
					this.OnAssessmentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float NOT NULL")]
		public double Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_IsExtraCredit", DbType="Bit NOT NULL")]
		public bool IsExtraCredit
		{
			get
			{
				return this._IsExtraCredit;
			}
			set
			{
				if ((this._IsExtraCredit != value))
				{
					this.OnIsExtraCreditChanging(value);
					this.SendPropertyChanging();
					this._IsExtraCredit = value;
					this.SendPropertyChanged("IsExtraCredit");
					this.OnIsExtraCreditChanged();
				}
			}
		}
		
		[Column(Storage="_CourseTermID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CourseTermID
		{
			get
			{
				return this._CourseTermID;
			}
			set
			{
				if ((this._CourseTermID != value))
				{
					if (this._CourseTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTermIDChanging(value);
					this.SendPropertyChanging();
					this._CourseTermID = value;
					this.SendPropertyChanged("CourseTermID");
					this.OnCourseTermIDChanged();
				}
			}
		}
		
		[Association(Name="AssessmentType_Assessment", Storage="_Assessments", OtherKey="AssessmentTypeID")]
		public EntitySet<Assessment> Assessments
		{
			get
			{
				return this._Assessments;
			}
			set
			{
				this._Assessments.Assign(value);
			}
		}
		
		[Association(Name="CourseTerm_AssessmentType", Storage="_CourseTerm", ThisKey="CourseTermID", IsForeignKey=true)]
		public CourseTerm CourseTerm
		{
			get
			{
				return this._CourseTerm.Entity;
			}
			set
			{
				CourseTerm previousValue = this._CourseTerm.Entity;
				if (((previousValue != value) 
							|| (this._CourseTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTerm.Entity = null;
						previousValue.AssessmentTypes.Remove(this);
					}
					this._CourseTerm.Entity = value;
					if ((value != null))
					{
						value.AssessmentTypes.Add(this);
						this._CourseTermID = value.CourseTermID;
					}
					else
					{
						this._CourseTermID = default(System.Guid);
					}
					this.SendPropertyChanged("CourseTerm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentType = this;
		}
		
		private void detach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentType = null;
		}
	}
	
	[Table(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CourseID;
		
		private string _Name;
		
		private string _Description;
		
		private string _ShortName;
		
		private System.Guid _SiteID;
		
		private EntitySet<CourseTerm> _CourseTerms;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(System.Guid value);
    partial void OnCourseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    #endregion
		
		public Course()
		{
			this._CourseTerms = new EntitySet<CourseTerm>(new Action<CourseTerm>(this.attach_CourseTerms), new Action<CourseTerm>(this.detach_CourseTerms));
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[Column(Storage="_CourseID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Association(Name="Course_CourseTerm", Storage="_CourseTerms", OtherKey="CourseID")]
		public EntitySet<CourseTerm> CourseTerms
		{
			get
			{
				return this._CourseTerms;
			}
			set
			{
				this._CourseTerms.Assign(value);
			}
		}
		
		[Association(Name="Site_Course", Storage="_Site", ThisKey="SiteID", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._SiteID = value.SiteID;
					}
					else
					{
						this._SiteID = default(System.Guid);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseTerms(CourseTerm entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseTerms(CourseTerm entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[Table(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _QuestionID;
		
		private double _Weight;
		
		private System.Guid _AssessmentID;
		
		private string _Data;
		
		private EntitySet<Answer> _Answers;
		
		private EntityRef<Assessment> _Assessment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(System.Guid value);
    partial void OnQuestionIDChanged();
    partial void OnWeightChanging(double value);
    partial void OnWeightChanged();
    partial void OnAssessmentIDChanging(System.Guid value);
    partial void OnAssessmentIDChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public Question()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Assessment = default(EntityRef<Assessment>);
			OnCreated();
		}
		
		[Column(Storage="_QuestionID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float NOT NULL")]
		public double Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_AssessmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssessmentID
		{
			get
			{
				return this._AssessmentID;
			}
			set
			{
				if ((this._AssessmentID != value))
				{
					if (this._Assessment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentID = value;
					this.SendPropertyChanged("AssessmentID");
					this.OnAssessmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Answers", OtherKey="QuestionID")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[Association(Name="Assessment_Question", Storage="_Assessment", ThisKey="AssessmentID", IsForeignKey=true)]
		public Assessment Assessment
		{
			get
			{
				return this._Assessment.Entity;
			}
			set
			{
				Assessment previousValue = this._Assessment.Entity;
				if (((previousValue != value) 
							|| (this._Assessment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assessment.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Assessment.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._AssessmentID = value.AssessmentID;
					}
					else
					{
						this._AssessmentID = default(System.Guid);
					}
					this.SendPropertyChanged("Assessment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[Table(Name="dbo.QuestionTags")]
	public partial class QuestionTag
	{
		
		private System.Guid _TagID;
		
		private System.Guid _QuestionID;
		
		public QuestionTag()
		{
		}
		
		[Column(Storage="_TagID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this._TagID = value;
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Responses")]
	public partial class Response : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResponseID;
		
		private System.Guid _SubmissionRecordID;
		
		private System.Guid _AnswerID;
		
		private string _ResponseText;
		
		private System.Nullable<double> _Score;
		
		private EntityRef<Answer> _Answer;
		
		private EntityRef<SubmissionRecord> _SubmissionRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResponseIDChanging(System.Guid value);
    partial void OnResponseIDChanged();
    partial void OnSubmissionRecordIDChanging(System.Guid value);
    partial void OnSubmissionRecordIDChanged();
    partial void OnAnswerIDChanging(System.Guid value);
    partial void OnAnswerIDChanged();
    partial void OnResponseTextChanging(string value);
    partial void OnResponseTextChanged();
    partial void OnScoreChanging(System.Nullable<double> value);
    partial void OnScoreChanged();
    #endregion
		
		public Response()
		{
			this._Answer = default(EntityRef<Answer>);
			this._SubmissionRecord = default(EntityRef<SubmissionRecord>);
			OnCreated();
		}
		
		[Column(Storage="_ResponseID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid ResponseID
		{
			get
			{
				return this._ResponseID;
			}
			set
			{
				if ((this._ResponseID != value))
				{
					this.OnResponseIDChanging(value);
					this.SendPropertyChanging();
					this._ResponseID = value;
					this.SendPropertyChanged("ResponseID");
					this.OnResponseIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubmissionRecordID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubmissionRecordID
		{
			get
			{
				return this._SubmissionRecordID;
			}
			set
			{
				if ((this._SubmissionRecordID != value))
				{
					if (this._SubmissionRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionRecordIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionRecordID = value;
					this.SendPropertyChanged("SubmissionRecordID");
					this.OnSubmissionRecordIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					if (this._Answer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResponseText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ResponseText
		{
			get
			{
				return this._ResponseText;
			}
			set
			{
				if ((this._ResponseText != value))
				{
					this.OnResponseTextChanging(value);
					this.SendPropertyChanging();
					this._ResponseText = value;
					this.SendPropertyChanged("ResponseText");
					this.OnResponseTextChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Float")]
		public System.Nullable<double> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Association(Name="Answer_Response", Storage="_Answer", ThisKey="AnswerID", IsForeignKey=true)]
		public Answer Answer
		{
			get
			{
				return this._Answer.Entity;
			}
			set
			{
				Answer previousValue = this._Answer.Entity;
				if (((previousValue != value) 
							|| (this._Answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answer.Entity = null;
						previousValue.Responses.Remove(this);
					}
					this._Answer.Entity = value;
					if ((value != null))
					{
						value.Responses.Add(this);
						this._AnswerID = value.AnswerID;
					}
					else
					{
						this._AnswerID = default(System.Guid);
					}
					this.SendPropertyChanged("Answer");
				}
			}
		}
		
		[Association(Name="SubmissionRecord_Response", Storage="_SubmissionRecord", ThisKey="SubmissionRecordID", IsForeignKey=true)]
		public SubmissionRecord SubmissionRecord
		{
			get
			{
				return this._SubmissionRecord.Entity;
			}
			set
			{
				SubmissionRecord previousValue = this._SubmissionRecord.Entity;
				if (((previousValue != value) 
							|| (this._SubmissionRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubmissionRecord.Entity = null;
						previousValue.Responses.Remove(this);
					}
					this._SubmissionRecord.Entity = value;
					if ((value != null))
					{
						value.Responses.Add(this);
						this._SubmissionRecordID = value.SubmissionRecordID;
					}
					else
					{
						this._SubmissionRecordID = default(System.Guid);
					}
					this.SendPropertyChanged("SubmissionRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sites")]
	public partial class Site : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SiteID;
		
		private string _Title;
		
		private string _ShortName;
		
		private string _Description;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<Term> _Terms;
		
		private EntitySet<CourseTerm> _CourseTerms;
		
		private EntitySet<SiteMember> _SiteMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Site()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Terms = new EntitySet<Term>(new Action<Term>(this.attach_Terms), new Action<Term>(this.detach_Terms));
			this._CourseTerms = new EntitySet<CourseTerm>(new Action<CourseTerm>(this.attach_CourseTerms), new Action<CourseTerm>(this.detach_CourseTerms));
			this._SiteMembers = new EntitySet<SiteMember>(new Action<SiteMember>(this.attach_SiteMembers), new Action<SiteMember>(this.detach_SiteMembers));
			OnCreated();
		}
		
		[Column(Storage="_SiteID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Site_Course", Storage="_Courses", OtherKey="SiteID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[Association(Name="Site_Term", Storage="_Terms", OtherKey="SiteID")]
		public EntitySet<Term> Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				this._Terms.Assign(value);
			}
		}
		
		[Association(Name="Site_CourseTerm", Storage="_CourseTerms", OtherKey="SiteID")]
		public EntitySet<CourseTerm> CourseTerms
		{
			get
			{
				return this._CourseTerms;
			}
			set
			{
				this._CourseTerms.Assign(value);
			}
		}
		
		[Association(Name="Site_SiteMember", Storage="_SiteMembers", OtherKey="SiteID")]
		public EntitySet<SiteMember> SiteMembers
		{
			get
			{
				return this._SiteMembers;
			}
			set
			{
				this._SiteMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_Terms(Term entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_Terms(Term entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_CourseTerms(CourseTerm entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_CourseTerms(CourseTerm entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_SiteMembers(SiteMember entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_SiteMembers(SiteMember entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
	}
	
	[Table(Name="dbo.SubmissionRecords")]
	public partial class SubmissionRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubmissionRecordID;
		
		private System.Guid _StudentID;
		
		private System.Guid _AssessmentID;
		
		private System.DateTime _SubmissionDate;
		
		private System.Nullable<System.DateTime> _GradedOn;
		
		private System.Nullable<System.Guid> _GradedBy;
		
		private string _Comments;
		
		private EntitySet<Response> _Responses;
		
		private EntityRef<Assessment> _Assessment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubmissionRecordIDChanging(System.Guid value);
    partial void OnSubmissionRecordIDChanged();
    partial void OnStudentIDChanging(System.Guid value);
    partial void OnStudentIDChanged();
    partial void OnAssessmentIDChanging(System.Guid value);
    partial void OnAssessmentIDChanged();
    partial void OnSubmissionDateChanging(System.DateTime value);
    partial void OnSubmissionDateChanged();
    partial void OnGradedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnGradedOnChanged();
    partial void OnGradedByChanging(System.Nullable<System.Guid> value);
    partial void OnGradedByChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public SubmissionRecord()
		{
			this._Responses = new EntitySet<Response>(new Action<Response>(this.attach_Responses), new Action<Response>(this.detach_Responses));
			this._Assessment = default(EntityRef<Assessment>);
			OnCreated();
		}
		
		[Column(Storage="_SubmissionRecordID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid SubmissionRecordID
		{
			get
			{
				return this._SubmissionRecordID;
			}
			set
			{
				if ((this._SubmissionRecordID != value))
				{
					this.OnSubmissionRecordIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionRecordID = value;
					this.SendPropertyChanged("SubmissionRecordID");
					this.OnSubmissionRecordIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssessmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssessmentID
		{
			get
			{
				return this._AssessmentID;
			}
			set
			{
				if ((this._AssessmentID != value))
				{
					if (this._Assessment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentID = value;
					this.SendPropertyChanged("AssessmentID");
					this.OnAssessmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubmissionDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmissionDate
		{
			get
			{
				return this._SubmissionDate;
			}
			set
			{
				if ((this._SubmissionDate != value))
				{
					this.OnSubmissionDateChanging(value);
					this.SendPropertyChanging();
					this._SubmissionDate = value;
					this.SendPropertyChanged("SubmissionDate");
					this.OnSubmissionDateChanged();
				}
			}
		}
		
		[Column(Storage="_GradedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> GradedOn
		{
			get
			{
				return this._GradedOn;
			}
			set
			{
				if ((this._GradedOn != value))
				{
					this.OnGradedOnChanging(value);
					this.SendPropertyChanging();
					this._GradedOn = value;
					this.SendPropertyChanged("GradedOn");
					this.OnGradedOnChanged();
				}
			}
		}
		
		[Column(Storage="_GradedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GradedBy
		{
			get
			{
				return this._GradedBy;
			}
			set
			{
				if ((this._GradedBy != value))
				{
					this.OnGradedByChanging(value);
					this.SendPropertyChanging();
					this._GradedBy = value;
					this.SendPropertyChanged("GradedBy");
					this.OnGradedByChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="SubmissionRecord_Response", Storage="_Responses", OtherKey="SubmissionRecordID")]
		public EntitySet<Response> Responses
		{
			get
			{
				return this._Responses;
			}
			set
			{
				this._Responses.Assign(value);
			}
		}
		
		[Association(Name="Assessment_SubmissionRecord", Storage="_Assessment", ThisKey="AssessmentID", IsForeignKey=true)]
		public Assessment Assessment
		{
			get
			{
				return this._Assessment.Entity;
			}
			set
			{
				Assessment previousValue = this._Assessment.Entity;
				if (((previousValue != value) 
							|| (this._Assessment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assessment.Entity = null;
						previousValue.SubmissionRecords.Remove(this);
					}
					this._Assessment.Entity = value;
					if ((value != null))
					{
						value.SubmissionRecords.Add(this);
						this._AssessmentID = value.AssessmentID;
					}
					else
					{
						this._AssessmentID = default(System.Guid);
					}
					this.SendPropertyChanged("Assessment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionRecord = this;
		}
		
		private void detach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionRecord = null;
		}
	}
	
	[Table(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TagID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Guid _CreatedBy;
		
		private System.Guid _CourseTermID;
		
		private EntityRef<CourseTerm> _CourseTerm;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(System.Guid value);
    partial void OnTagIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCourseTermIDChanging(System.Guid value);
    partial void OnCourseTermIDChanged();
    #endregion
		
		public Tag()
		{
			this._CourseTerm = default(EntityRef<CourseTerm>);
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[Column(Storage="_TagID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CourseTermID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CourseTermID
		{
			get
			{
				return this._CourseTermID;
			}
			set
			{
				if ((this._CourseTermID != value))
				{
					if (this._CourseTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTermIDChanging(value);
					this.SendPropertyChanging();
					this._CourseTermID = value;
					this.SendPropertyChanged("CourseTermID");
					this.OnCourseTermIDChanged();
				}
			}
		}
		
		[Association(Name="CourseTerm_Tag", Storage="_CourseTerm", ThisKey="CourseTermID", IsForeignKey=true)]
		public CourseTerm CourseTerm
		{
			get
			{
				return this._CourseTerm.Entity;
			}
			set
			{
				CourseTerm previousValue = this._CourseTerm.Entity;
				if (((previousValue != value) 
							|| (this._CourseTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTerm.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._CourseTerm.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._CourseTermID = value.CourseTermID;
					}
					else
					{
						this._CourseTermID = default(System.Guid);
					}
					this.SendPropertyChanged("CourseTerm");
				}
			}
		}
		
		[Association(Name="Profile_Tag", Storage="_Profile", ThisKey="CreatedBy", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._CreatedBy = value.MembershipID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Terms")]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TermID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Name;
		
		private System.Guid _SiteID;
		
		private EntitySet<CourseTerm> _CourseTerms;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermIDChanging(System.Guid value);
    partial void OnTermIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    #endregion
		
		public Term()
		{
			this._CourseTerms = new EntitySet<CourseTerm>(new Action<CourseTerm>(this.attach_CourseTerms), new Action<CourseTerm>(this.detach_CourseTerms));
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[Column(Storage="_TermID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid TermID
		{
			get
			{
				return this._TermID;
			}
			set
			{
				if ((this._TermID != value))
				{
					this.OnTermIDChanging(value);
					this.SendPropertyChanging();
					this._TermID = value;
					this.SendPropertyChanged("TermID");
					this.OnTermIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Association(Name="Term_CourseTerm", Storage="_CourseTerms", OtherKey="TermID")]
		public EntitySet<CourseTerm> CourseTerms
		{
			get
			{
				return this._CourseTerms;
			}
			set
			{
				this._CourseTerms.Assign(value);
			}
		}
		
		[Association(Name="Site_Term", Storage="_Site", ThisKey="SiteID", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.Terms.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.Terms.Add(this);
						this._SiteID = value.SiteID;
					}
					else
					{
						this._SiteID = default(System.Guid);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseTerms(CourseTerm entity)
		{
			this.SendPropertyChanging();
			entity.Term = this;
		}
		
		private void detach_CourseTerms(CourseTerm entity)
		{
			this.SendPropertyChanging();
			entity.Term = null;
		}
	}
	
	[Table(Name="dbo.CourseTerms")]
	public partial class CourseTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CourseTermID;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _Information;
		
		private System.Guid _Instructor;
		
		private System.Guid _CourseID;
		
		private System.Guid _TermID;
		
		private System.Guid _SiteID;
		
		private EntitySet<Assessment> _Assessments;
		
		private EntitySet<AssessmentType> _AssessmentTypes;
		
		private EntitySet<Tag> _Tags;
		
		private EntitySet<CourseTermMember> _CourseTermMembers;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Site> _Site;
		
		private EntityRef<Term> _Term;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseTermIDChanging(System.Guid value);
    partial void OnCourseTermIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnInformationChanging(string value);
    partial void OnInformationChanged();
    partial void OnInstructorChanging(System.Guid value);
    partial void OnInstructorChanged();
    partial void OnCourseIDChanging(System.Guid value);
    partial void OnCourseIDChanged();
    partial void OnTermIDChanging(System.Guid value);
    partial void OnTermIDChanged();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    #endregion
		
		public CourseTerm()
		{
			this._Assessments = new EntitySet<Assessment>(new Action<Assessment>(this.attach_Assessments), new Action<Assessment>(this.detach_Assessments));
			this._AssessmentTypes = new EntitySet<AssessmentType>(new Action<AssessmentType>(this.attach_AssessmentTypes), new Action<AssessmentType>(this.detach_AssessmentTypes));
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._CourseTermMembers = new EntitySet<CourseTermMember>(new Action<CourseTermMember>(this.attach_CourseTermMembers), new Action<CourseTermMember>(this.detach_CourseTermMembers));
			this._Course = default(EntityRef<Course>);
			this._Site = default(EntityRef<Site>);
			this._Term = default(EntityRef<Term>);
			OnCreated();
		}
		
		[Column(Storage="_CourseTermID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid CourseTermID
		{
			get
			{
				return this._CourseTermID;
			}
			set
			{
				if ((this._CourseTermID != value))
				{
					this.OnCourseTermIDChanging(value);
					this.SendPropertyChanging();
					this._CourseTermID = value;
					this.SendPropertyChanged("CourseTermID");
					this.OnCourseTermIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_Information", DbType="VarChar(500)")]
		public string Information
		{
			get
			{
				return this._Information;
			}
			set
			{
				if ((this._Information != value))
				{
					this.OnInformationChanging(value);
					this.SendPropertyChanging();
					this._Information = value;
					this.SendPropertyChanged("Information");
					this.OnInformationChanged();
				}
			}
		}
		
		[Column(Storage="_Instructor", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Instructor
		{
			get
			{
				return this._Instructor;
			}
			set
			{
				if ((this._Instructor != value))
				{
					this.OnInstructorChanging(value);
					this.SendPropertyChanging();
					this._Instructor = value;
					this.SendPropertyChanged("Instructor");
					this.OnInstructorChanged();
				}
			}
		}
		
		[Column(Storage="_CourseID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[Column(Storage="_TermID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TermID
		{
			get
			{
				return this._TermID;
			}
			set
			{
				if ((this._TermID != value))
				{
					if (this._Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIDChanging(value);
					this.SendPropertyChanging();
					this._TermID = value;
					this.SendPropertyChanged("TermID");
					this.OnTermIDChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Association(Name="CourseTerm_Assessment", Storage="_Assessments", OtherKey="CourseTermID")]
		public EntitySet<Assessment> Assessments
		{
			get
			{
				return this._Assessments;
			}
			set
			{
				this._Assessments.Assign(value);
			}
		}
		
		[Association(Name="CourseTerm_AssessmentType", Storage="_AssessmentTypes", OtherKey="CourseTermID")]
		public EntitySet<AssessmentType> AssessmentTypes
		{
			get
			{
				return this._AssessmentTypes;
			}
			set
			{
				this._AssessmentTypes.Assign(value);
			}
		}
		
		[Association(Name="CourseTerm_Tag", Storage="_Tags", OtherKey="CourseTermID")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[Association(Name="CourseTerm_CourseTermMember", Storage="_CourseTermMembers", OtherKey="CourseTermID")]
		public EntitySet<CourseTermMember> CourseTermMembers
		{
			get
			{
				return this._CourseTermMembers;
			}
			set
			{
				this._CourseTermMembers.Assign(value);
			}
		}
		
		[Association(Name="Course_CourseTerm", Storage="_Course", ThisKey="CourseID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseTerms.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseTerms.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(System.Guid);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[Association(Name="Site_CourseTerm", Storage="_Site", ThisKey="SiteID", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.CourseTerms.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.CourseTerms.Add(this);
						this._SiteID = value.SiteID;
					}
					else
					{
						this._SiteID = default(System.Guid);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		[Association(Name="Term_CourseTerm", Storage="_Term", ThisKey="TermID", IsForeignKey=true)]
		public Term Term
		{
			get
			{
				return this._Term.Entity;
			}
			set
			{
				Term previousValue = this._Term.Entity;
				if (((previousValue != value) 
							|| (this._Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Term.Entity = null;
						previousValue.CourseTerms.Remove(this);
					}
					this._Term.Entity = value;
					if ((value != null))
					{
						value.CourseTerms.Add(this);
						this._TermID = value.TermID;
					}
					else
					{
						this._TermID = default(System.Guid);
					}
					this.SendPropertyChanged("Term");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.CourseTerm = this;
		}
		
		private void detach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.CourseTerm = null;
		}
		
		private void attach_AssessmentTypes(AssessmentType entity)
		{
			this.SendPropertyChanging();
			entity.CourseTerm = this;
		}
		
		private void detach_AssessmentTypes(AssessmentType entity)
		{
			this.SendPropertyChanging();
			entity.CourseTerm = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.CourseTerm = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.CourseTerm = null;
		}
		
		private void attach_CourseTermMembers(CourseTermMember entity)
		{
			this.SendPropertyChanging();
			entity.CourseTerm = this;
		}
		
		private void detach_CourseTermMembers(CourseTermMember entity)
		{
			this.SendPropertyChanging();
			entity.CourseTerm = null;
		}
	}
	
	[Table(Name="dbo.Profiles")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MembershipID;
		
		private string _SchoolIDNumber;
		
		private string _FirstName;
		
		private string _LastName;
		
		private byte _AccessLevel;
		
		private EntitySet<Tag> _Tags;
		
		private EntitySet<CourseTermMember> _CourseTermMembers;
		
		private EntitySet<SiteMember> _SiteMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembershipIDChanging(System.Guid value);
    partial void OnMembershipIDChanged();
    partial void OnSchoolIDNumberChanging(string value);
    partial void OnSchoolIDNumberChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAccessLevelChanging(byte value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public Profile()
		{
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._CourseTermMembers = new EntitySet<CourseTermMember>(new Action<CourseTermMember>(this.attach_CourseTermMembers), new Action<CourseTermMember>(this.detach_CourseTermMembers));
			this._SiteMembers = new EntitySet<SiteMember>(new Action<SiteMember>(this.attach_SiteMembers), new Action<SiteMember>(this.detach_SiteMembers));
			OnCreated();
		}
		
		[Column(Storage="_MembershipID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MembershipID
		{
			get
			{
				return this._MembershipID;
			}
			set
			{
				if ((this._MembershipID != value))
				{
					this.OnMembershipIDChanging(value);
					this.SendPropertyChanging();
					this._MembershipID = value;
					this.SendPropertyChanged("MembershipID");
					this.OnMembershipIDChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolIDNumber", DbType="VarChar(50)")]
		public string SchoolIDNumber
		{
			get
			{
				return this._SchoolIDNumber;
			}
			set
			{
				if ((this._SchoolIDNumber != value))
				{
					this.OnSchoolIDNumberChanging(value);
					this.SendPropertyChanging();
					this._SchoolIDNumber = value;
					this.SendPropertyChanged("SchoolIDNumber");
					this.OnSchoolIDNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_AccessLevel", DbType="TinyInt NOT NULL")]
		public byte AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[Association(Name="Profile_Tag", Storage="_Tags", OtherKey="CreatedBy")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[Association(Name="Profile_CourseTermMember", Storage="_CourseTermMembers", OtherKey="MembershipID")]
		public EntitySet<CourseTermMember> CourseTermMembers
		{
			get
			{
				return this._CourseTermMembers;
			}
			set
			{
				this._CourseTermMembers.Assign(value);
			}
		}
		
		[Association(Name="Profile_SiteMember", Storage="_SiteMembers", OtherKey="MembershipID")]
		public EntitySet<SiteMember> SiteMembers
		{
			get
			{
				return this._SiteMembers;
			}
			set
			{
				this._SiteMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_CourseTermMembers(CourseTermMember entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_CourseTermMembers(CourseTermMember entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_SiteMembers(SiteMember entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_SiteMembers(SiteMember entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
	}
	
	[Table(Name="dbo.CourseTermMembers")]
	public partial class CourseTermMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CourseTermMemberID;
		
		private System.Guid _CourseTermID;
		
		private System.Guid _MembershipID;
		
		private byte _AccessLevel;
		
		private EntityRef<CourseTerm> _CourseTerm;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseTermMemberIDChanging(System.Guid value);
    partial void OnCourseTermMemberIDChanged();
    partial void OnCourseTermIDChanging(System.Guid value);
    partial void OnCourseTermIDChanged();
    partial void OnMembershipIDChanging(System.Guid value);
    partial void OnMembershipIDChanged();
    partial void OnAccessLevelChanging(byte value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public CourseTermMember()
		{
			this._CourseTerm = default(EntityRef<CourseTerm>);
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[Column(Storage="_CourseTermMemberID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid CourseTermMemberID
		{
			get
			{
				return this._CourseTermMemberID;
			}
			set
			{
				if ((this._CourseTermMemberID != value))
				{
					this.OnCourseTermMemberIDChanging(value);
					this.SendPropertyChanging();
					this._CourseTermMemberID = value;
					this.SendPropertyChanged("CourseTermMemberID");
					this.OnCourseTermMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_CourseTermID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CourseTermID
		{
			get
			{
				return this._CourseTermID;
			}
			set
			{
				if ((this._CourseTermID != value))
				{
					if (this._CourseTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTermIDChanging(value);
					this.SendPropertyChanging();
					this._CourseTermID = value;
					this.SendPropertyChanged("CourseTermID");
					this.OnCourseTermIDChanged();
				}
			}
		}
		
		[Column(Storage="_MembershipID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MembershipID
		{
			get
			{
				return this._MembershipID;
			}
			set
			{
				if ((this._MembershipID != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembershipIDChanging(value);
					this.SendPropertyChanging();
					this._MembershipID = value;
					this.SendPropertyChanged("MembershipID");
					this.OnMembershipIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccessLevel", DbType="TinyInt NOT NULL")]
		public byte AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[Association(Name="CourseTerm_CourseTermMember", Storage="_CourseTerm", ThisKey="CourseTermID", IsForeignKey=true)]
		public CourseTerm CourseTerm
		{
			get
			{
				return this._CourseTerm.Entity;
			}
			set
			{
				CourseTerm previousValue = this._CourseTerm.Entity;
				if (((previousValue != value) 
							|| (this._CourseTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTerm.Entity = null;
						previousValue.CourseTermMembers.Remove(this);
					}
					this._CourseTerm.Entity = value;
					if ((value != null))
					{
						value.CourseTermMembers.Add(this);
						this._CourseTermID = value.CourseTermID;
					}
					else
					{
						this._CourseTermID = default(System.Guid);
					}
					this.SendPropertyChanged("CourseTerm");
				}
			}
		}
		
		[Association(Name="Profile_CourseTermMember", Storage="_Profile", ThisKey="MembershipID", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.CourseTermMembers.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.CourseTermMembers.Add(this);
						this._MembershipID = value.MembershipID;
					}
					else
					{
						this._MembershipID = default(System.Guid);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SiteMembers")]
	public partial class SiteMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SiteMemberID;
		
		private System.Guid _SiteID;
		
		private System.Guid _MembershipID;
		
		private byte _AccessLevel;
		
		private EntityRef<Profile> _Profile;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteMemberIDChanging(System.Guid value);
    partial void OnSiteMemberIDChanged();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    partial void OnMembershipIDChanging(System.Guid value);
    partial void OnMembershipIDChanged();
    partial void OnAccessLevelChanging(byte value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public SiteMember()
		{
			this._Profile = default(EntityRef<Profile>);
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[Column(Storage="_SiteMemberID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid SiteMemberID
		{
			get
			{
				return this._SiteMemberID;
			}
			set
			{
				if ((this._SiteMemberID != value))
				{
					this.OnSiteMemberIDChanging(value);
					this.SendPropertyChanging();
					this._SiteMemberID = value;
					this.SendPropertyChanged("SiteMemberID");
					this.OnSiteMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Column(Storage="_MembershipID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MembershipID
		{
			get
			{
				return this._MembershipID;
			}
			set
			{
				if ((this._MembershipID != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembershipIDChanging(value);
					this.SendPropertyChanging();
					this._MembershipID = value;
					this.SendPropertyChanged("MembershipID");
					this.OnMembershipIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccessLevel", DbType="TinyInt NOT NULL")]
		public byte AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[Association(Name="Profile_SiteMember", Storage="_Profile", ThisKey="MembershipID", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.SiteMembers.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.SiteMembers.Add(this);
						this._MembershipID = value.MembershipID;
					}
					else
					{
						this._MembershipID = default(System.Guid);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[Association(Name="Site_SiteMember", Storage="_Site", ThisKey="SiteID", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.SiteMembers.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.SiteMembers.Add(this);
						this._SiteID = value.SiteID;
					}
					else
					{
						this._SiteID = default(System.Guid);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
